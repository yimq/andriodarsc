//--------------------------------------
//--- 010 Editor v5.0.2 Binary Template
//
// File:
// Author:yimq
// Revision:
// Purpose:
//--------------------------------------
struct  ResChunk_header
{   
    SetBackColor( cRed );
    ushort type;
    ushort headerSize;
    uint size;
    SetBackColor( cRed );
};

ushort decodeLengthUTF8()
{
    local ubyte len1 = ReadUByte(FTell());
    if ((len1 & 0x80) !=0) 
    {
        local ushort len2 = ReadUShort(FTell());
        FSkip(2);
        return len2 & 0x7fff;
    }
    else
    {
        FSkip(1);
        return len1;
    }
};

uint decodeLengthUTF16()
{
    local ubyte len1 = ReadUByte(FTell());
    if ((len1 & 0x80) !=0) 
    {
        local uint len2 = ReadUInt(FTell());
        FSkip(4);
        return len2 & 0x7fffffff;
    }
    else
    {
        FSkip(1);
        return len1;
    }
    
};

struct String8
{
    local uint charCount = decodeLengthUTF8();
    local uint stringSize = decodeLengthUTF8();
    byte content[stringSize];
    byte zero;
};

struct String16
{
    local uint charCount = decodeLengthUTF16();
    local uint stringSize = decodeLengthUTF16();
    byte content[stringSize];
    byte zero;
};

struct ResStringPool
{   
    local int __begin = FTell();
    ResChunk_header header;
    
    uint stringCount;
    uint styleCount;
    enum uint { SORTED_FLAG = 1<<0, UTF8_FLAG = 1<<8 } flags;
    uint stringStart;
    uint styleStart;
   
    uint stringIndices[stringCount + styleCount];
    
    FSeek(stringStart + __begin);
    local uint i;
    for (i=0;i<stringCount;i++) 
    {   
        FSeek(stringStart + __begin + stringIndices[i]);
        if ((flags & UTF8_FLAG) != 0)
        {       
             String8 stringConent;    
        }
        else
        {
             String16 stringConent;
        }
    }

    FSeek(styleStart + __begin);
    for (i=0;i<styleCount;i++) 
    {   
        FSeek(stringStart + __begin + stringIndices[i + stringCount]);
        if ((flags & UTF8_FLAG) != 0)
        {
             String8 stringConent;    
        }
        else
        {
             String16 stringConent;
        }
    }
    // Sometimes there are some zeros padding after the string chunk
    FSeek(header.size + __begin);
};

struct ResTable_config
{   

    enum {
        ACONFIGURATION_ORIENTATION_ANY  = 0x0000,
        ACONFIGURATION_ORIENTATION_PORT = 0x0001,
        ACONFIGURATION_ORIENTATION_LAND = 0x0002,
        ACONFIGURATION_ORIENTATION_SQUARE = 0x0003,
    
        ACONFIGURATION_TOUCHSCREEN_ANY  = 0x0000,
        ACONFIGURATION_TOUCHSCREEN_NOTOUCH  = 0x0001,
        ACONFIGURATION_TOUCHSCREEN_STYLUS  = 0x0002,
        ACONFIGURATION_TOUCHSCREEN_FINGER  = 0x0003,
    
        ACONFIGURATION_DENSITY_DEFAULT = 0,
        ACONFIGURATION_DENSITY_LOW = 120,
        ACONFIGURATION_DENSITY_MEDIUM = 160,
        ACONFIGURATION_DENSITY_TV = 213,
        ACONFIGURATION_DENSITY_HIGH = 240,
        ACONFIGURATION_DENSITY_NONE = 0xffff,
    
        ACONFIGURATION_KEYBOARD_ANY  = 0x0000,
        ACONFIGURATION_KEYBOARD_NOKEYS  = 0x0001,
        ACONFIGURATION_KEYBOARD_QWERTY  = 0x0002,
        ACONFIGURATION_KEYBOARD_12KEY  = 0x0003,
    
        ACONFIGURATION_NAVIGATION_ANY  = 0x0000,
        ACONFIGURATION_NAVIGATION_NONAV  = 0x0001,
        ACONFIGURATION_NAVIGATION_DPAD  = 0x0002,
        ACONFIGURATION_NAVIGATION_TRACKBALL  = 0x0003,
        ACONFIGURATION_NAVIGATION_WHEEL  = 0x0004,
    
        ACONFIGURATION_KEYSHIDDEN_ANY = 0x0000,
        ACONFIGURATION_KEYSHIDDEN_NO = 0x0001,
        ACONFIGURATION_KEYSHIDDEN_YES = 0x0002,
        ACONFIGURATION_KEYSHIDDEN_SOFT = 0x0003,
    
        ACONFIGURATION_NAVHIDDEN_ANY = 0x0000,
        ACONFIGURATION_NAVHIDDEN_NO = 0x0001,
        ACONFIGURATION_NAVHIDDEN_YES = 0x0002,
    
        ACONFIGURATION_SCREENSIZE_ANY  = 0x00,
        ACONFIGURATION_SCREENSIZE_SMALL = 0x01,
        ACONFIGURATION_SCREENSIZE_NORMAL = 0x02,
        ACONFIGURATION_SCREENSIZE_LARGE = 0x03,
        ACONFIGURATION_SCREENSIZE_XLARGE = 0x04,
    
        ACONFIGURATION_SCREENLONG_ANY = 0x00,
        ACONFIGURATION_SCREENLONG_NO = 0x1,
        ACONFIGURATION_SCREENLONG_YES = 0x2,
    
        ACONFIGURATION_UI_MODE_TYPE_ANY = 0x00,
        ACONFIGURATION_UI_MODE_TYPE_NORMAL = 0x01,
        ACONFIGURATION_UI_MODE_TYPE_DESK = 0x02,
        ACONFIGURATION_UI_MODE_TYPE_CAR = 0x03,
        ACONFIGURATION_UI_MODE_TYPE_TELEVISION = 0x04,
    
        ACONFIGURATION_UI_MODE_NIGHT_ANY = 0x00,
        ACONFIGURATION_UI_MODE_NIGHT_NO = 0x1,
        ACONFIGURATION_UI_MODE_NIGHT_YES = 0x2,
    
        ACONFIGURATION_SCREEN_WIDTH_DP_ANY = 0x0000,
    
        ACONFIGURATION_SCREEN_HEIGHT_DP_ANY = 0x0000,
    
        ACONFIGURATION_SMALLEST_SCREEN_WIDTH_DP_ANY = 0x0000,
    
        ACONFIGURATION_MCC = 0x0001,
        ACONFIGURATION_MNC = 0x0002,
        ACONFIGURATION_LOCALE = 0x0004,
        ACONFIGURATION_TOUCHSCREEN = 0x0008,
        ACONFIGURATION_KEYBOARD = 0x0010,
        ACONFIGURATION_KEYBOARD_HIDDEN = 0x0020,
        ACONFIGURATION_NAVIGATION = 0x0040,
        ACONFIGURATION_ORIENTATION = 0x0080,
        ACONFIGURATION_DENSITY = 0x0100,
        ACONFIGURATION_SCREEN_SIZE = 0x0200,
        ACONFIGURATION_VERSION = 0x0400,
        ACONFIGURATION_SCREEN_LAYOUT = 0x0800,
        ACONFIGURATION_UI_MODE = 0x1000,
        ACONFIGURATION_SMALLEST_SCREEN_SIZE = 0x2000,
    };
    // Number of bytes in this structure.
    uint32 size;
    
    union {
        struct {
            // Mobile country code (from SIM).  0 means "any".
            ushort mcc;
            // Mobile network code (from SIM).  0 means "any".
            ushort mnc;
        } m;
        uint32 imsi;
    } sim;
    
    union {
        struct {
            // \0\0 means "any".  Otherwise, en, fr, etc.
            char language[2];
            
            // \0\0 means "any".  Otherwise, US, CA, etc.
            char country[2];
        } c;
        uint32 locale;
    } language;
    
    enum {
        ORIENTATION_ANY  = ACONFIGURATION_ORIENTATION_ANY,
        ORIENTATION_PORT = ACONFIGURATION_ORIENTATION_PORT,
        ORIENTATION_LAND = ACONFIGURATION_ORIENTATION_LAND,
        ORIENTATION_SQUARE = ACONFIGURATION_ORIENTATION_SQUARE,
    };
    
    enum {
        TOUCHSCREEN_ANY  = ACONFIGURATION_TOUCHSCREEN_ANY,
        TOUCHSCREEN_NOTOUCH  = ACONFIGURATION_TOUCHSCREEN_NOTOUCH,
        TOUCHSCREEN_STYLUS  = ACONFIGURATION_TOUCHSCREEN_STYLUS,
        TOUCHSCREEN_FINGER  = ACONFIGURATION_TOUCHSCREEN_FINGER,
    };
    
    enum {
        DENSITY_DEFAULT = ACONFIGURATION_DENSITY_DEFAULT,
        DENSITY_LOW = ACONFIGURATION_DENSITY_LOW,
        DENSITY_MEDIUM = ACONFIGURATION_DENSITY_MEDIUM,
        DENSITY_TV = ACONFIGURATION_DENSITY_TV,
        DENSITY_HIGH = ACONFIGURATION_DENSITY_HIGH,
        DENSITY_NONE = ACONFIGURATION_DENSITY_NONE
    };
    
    union {
        struct {
            byte orientation;
            byte touchscreen;
            ushort density;
        } screen;
        uint32 screenType;
    } screen;
    
    enum {
        KEYBOARD_ANY  = ACONFIGURATION_KEYBOARD_ANY,
        KEYBOARD_NOKEYS  = ACONFIGURATION_KEYBOARD_NOKEYS,
        KEYBOARD_QWERTY  = ACONFIGURATION_KEYBOARD_QWERTY,
        KEYBOARD_12KEY  = ACONFIGURATION_KEYBOARD_12KEY,
    };
    
    enum {
        NAVIGATION_ANY  = ACONFIGURATION_NAVIGATION_ANY,
        NAVIGATION_NONAV  = ACONFIGURATION_NAVIGATION_NONAV,
        NAVIGATION_DPAD  = ACONFIGURATION_NAVIGATION_DPAD,
        NAVIGATION_TRACKBALL  = ACONFIGURATION_NAVIGATION_TRACKBALL,
        NAVIGATION_WHEEL  = ACONFIGURATION_NAVIGATION_WHEEL,
    };
    
    enum {
        MASK_KEYSHIDDEN = 0x0003,
        KEYSHIDDEN_ANY = ACONFIGURATION_KEYSHIDDEN_ANY,
        KEYSHIDDEN_NO = ACONFIGURATION_KEYSHIDDEN_NO,
        KEYSHIDDEN_YES = ACONFIGURATION_KEYSHIDDEN_YES,
        KEYSHIDDEN_SOFT = ACONFIGURATION_KEYSHIDDEN_SOFT,
    };
    
    enum {
        MASK_NAVHIDDEN = 0x000c,
        SHIFT_NAVHIDDEN = 2,
        NAVHIDDEN_ANY = ACONFIGURATION_NAVHIDDEN_ANY << SHIFT_NAVHIDDEN,
        NAVHIDDEN_NO = ACONFIGURATION_NAVHIDDEN_NO << SHIFT_NAVHIDDEN,
        NAVHIDDEN_YES = ACONFIGURATION_NAVHIDDEN_YES << SHIFT_NAVHIDDEN,
    };
    
    union {
        struct {
            byte keyboard;
            byte navigation;
            byte inputFlags;
            byte inputPad0;
        } keyboard;
        uint32 input;
    } input;
    
    enum {
        SCREENWIDTH_ANY = 0
    };
    
    enum {
        SCREENHEIGHT_ANY = 0
    };
    
    union {
        struct {
            ushort screenWidth;
            ushort screenHeight;
        } screen;
        uint32 screenSize;
    } screen;
    
    enum {
        SDKVERSION_ANY = 0
    };
    
    enum {
        MINORVERSION_ANY = 0
    };
    
    union {
        struct {
            ushort sdkVersion;
            // For now minorVersion must always be 0!!!  Its meaning
            // is currently undefined.
            ushort minorVersion;
        } version;
        uint32 version;
    } version;
    
    enum {
        // screenLayout bits for screen size class.
        MASK_SCREENSIZE = 0x0f,
        SCREENSIZE_ANY = ACONFIGURATION_SCREENSIZE_ANY,
        SCREENSIZE_SMALL = ACONFIGURATION_SCREENSIZE_SMALL,
        SCREENSIZE_NORMAL = ACONFIGURATION_SCREENSIZE_NORMAL,
        SCREENSIZE_LARGE = ACONFIGURATION_SCREENSIZE_LARGE,
        SCREENSIZE_XLARGE = ACONFIGURATION_SCREENSIZE_XLARGE,
        
        // screenLayout bits for wide/long screen variation.
        MASK_SCREENLONG = 0x30,
        SHIFT_SCREENLONG = 4,
        SCREENLONG_ANY = ACONFIGURATION_SCREENLONG_ANY << SHIFT_SCREENLONG,
        SCREENLONG_NO = ACONFIGURATION_SCREENLONG_NO << SHIFT_SCREENLONG,
        SCREENLONG_YES = ACONFIGURATION_SCREENLONG_YES << SHIFT_SCREENLONG,
    };
    
    enum {
        // uiMode bits for the mode type.
        MASK_UI_MODE_TYPE = 0x0f,
        UI_MODE_TYPE_ANY = ACONFIGURATION_UI_MODE_TYPE_ANY,
        UI_MODE_TYPE_NORMAL = ACONFIGURATION_UI_MODE_TYPE_NORMAL,
        UI_MODE_TYPE_DESK = ACONFIGURATION_UI_MODE_TYPE_DESK,
        UI_MODE_TYPE_CAR = ACONFIGURATION_UI_MODE_TYPE_CAR,
        UI_MODE_TYPE_TELEVISION = ACONFIGURATION_UI_MODE_TYPE_TELEVISION,

        // uiMode bits for the night switch.
        MASK_UI_MODE_NIGHT = 0x30,
        SHIFT_UI_MODE_NIGHT = 4,
        UI_MODE_NIGHT_ANY = ACONFIGURATION_UI_MODE_NIGHT_ANY << SHIFT_UI_MODE_NIGHT,
        UI_MODE_NIGHT_NO = ACONFIGURATION_UI_MODE_NIGHT_NO << SHIFT_UI_MODE_NIGHT,
        UI_MODE_NIGHT_YES = ACONFIGURATION_UI_MODE_NIGHT_YES << SHIFT_UI_MODE_NIGHT,
    };

    union {
        struct {
            byte screenLayout;
            byte uiMode;
            ushort smallestScreenWidthDp;
        } layout;
        uint32 screenConfig;
    } layout;
    
    union {
        struct {
            ushort screenWidthDp;
            ushort screenHeightDp;
        } dp;
        uint32 screenSizeDp;
    } dp;
    
    // Flags indicating a set of config values.  These flag constants must
    // match the corresponding ones in android.content.pm.ActivityInfo and
    // attrs_manifest.xml.
    enum {
        CONFIG_MCC = ACONFIGURATION_MCC,
        CONFIG_MNC = ACONFIGURATION_MCC,
        CONFIG_LOCALE = ACONFIGURATION_LOCALE,
        CONFIG_TOUCHSCREEN = ACONFIGURATION_TOUCHSCREEN,
        CONFIG_KEYBOARD = ACONFIGURATION_KEYBOARD,
        CONFIG_KEYBOARD_HIDDEN = ACONFIGURATION_KEYBOARD_HIDDEN,
        CONFIG_NAVIGATION = ACONFIGURATION_NAVIGATION,
        CONFIG_ORIENTATION = ACONFIGURATION_ORIENTATION,
        CONFIG_DENSITY = ACONFIGURATION_DENSITY,
        CONFIG_SCREEN_SIZE = ACONFIGURATION_SCREEN_SIZE,
        CONFIG_SMALLEST_SCREEN_SIZE = ACONFIGURATION_SMALLEST_SCREEN_SIZE,
        CONFIG_VERSION = ACONFIGURATION_VERSION,
        CONFIG_SCREEN_LAYOUT = ACONFIGURATION_SCREEN_LAYOUT,
        CONFIG_UI_MODE = ACONFIGURATION_UI_MODE
    };    
};

struct Res_value
{
    // Number of bytes in this structure.
    ushort size;

    // Always set to 0.
    byte res0;
        
    // Type of the data value.
    enum {
        // Contains no data.
        TYPE_NULL = 0x00,
        // The 'data' holds a ResTable_ref, a reference to another resource
        // table entry.
        TYPE_REFERENCE = 0x01,
        // The 'data' holds an attribute resource identifier.
        TYPE_ATTRIBUTE = 0x02,
        // The 'data' holds an index into the containing resource table's
        // global value string pool.
        TYPE_STRING = 0x03,
        // The 'data' holds a single-precision floating point number.
        TYPE_FLOAT = 0x04,
        // The 'data' holds a complex number encoding a dimension value,
        // such as "100in".
        TYPE_DIMENSION = 0x05,
        // The 'data' holds a complex number encoding a fraction of a
        // container.
        TYPE_FRACTION = 0x06,

        // Beginning of integer flavors...
        TYPE_FIRST_INT = 0x10,

        // The 'data' is a raw integer value of the form n..n.
        TYPE_INT_DEC = 0x10,
        // The 'data' is a raw integer value of the form 0xn..n.
        TYPE_INT_HEX = 0x11,
        // The 'data' is either 0 or 1, for input "false" or "true" respectively.
        TYPE_INT_BOOLEAN = 0x12,

        // Beginning of color integer flavors...
        TYPE_FIRST_COLOR_INT = 0x1c,

        // The 'data' is a raw integer value of the form #aarrggbb.
        TYPE_INT_COLOR_ARGB8 = 0x1c,
        // The 'data' is a raw integer value of the form #rrggbb.
        TYPE_INT_COLOR_RGB8 = 0x1d,
        // The 'data' is a raw integer value of the form #argb.
        TYPE_INT_COLOR_ARGB4 = 0x1e,
        // The 'data' is a raw integer value of the form #rgb.
        TYPE_INT_COLOR_RGB4 = 0x1f,

        // ...end of integer flavors.
        TYPE_LAST_COLOR_INT = 0x1f,

        // ...end of integer flavors.
        TYPE_LAST_INT = 0x1f
    };
    byte dataType;

    // Structure of complex data values (TYPE_UNIT and TYPE_FRACTION)
    enum {
        // Where the unit type information is.  This gives us 16 possible
        // types, as defined below.
        COMPLEX_UNIT_SHIFT = 0,
        COMPLEX_UNIT_MASK = 0xf,

        // TYPE_DIMENSION: Value is raw pixels.
        COMPLEX_UNIT_PX = 0,
        // TYPE_DIMENSION: Value is Device Independent Pixels.
        COMPLEX_UNIT_DIP = 1,
        // TYPE_DIMENSION: Value is a Scaled device independent Pixels.
        COMPLEX_UNIT_SP = 2,
        // TYPE_DIMENSION: Value is in points.
        COMPLEX_UNIT_PT = 3,
        // TYPE_DIMENSION: Value is in inches.
        COMPLEX_UNIT_IN = 4,
        // TYPE_DIMENSION: Value is in millimeters.
        COMPLEX_UNIT_MM = 5,

        // TYPE_FRACTION: A basic fraction of the overall size.
        COMPLEX_UNIT_FRACTION = 0,
        // TYPE_FRACTION: A fraction of the parent size.
        COMPLEX_UNIT_FRACTION_PARENT = 1,

        // Where the radix information is, telling where the decimal place
        // appears in the mantissa.  This give us 4 possible fixed point
        // representations as defined below.
        COMPLEX_RADIX_SHIFT = 4,
        COMPLEX_RADIX_MASK = 0x3,

        // The mantissa is an integral number -- i.e., 0xnnnnnn.0
        COMPLEX_RADIX_23p0 = 0,
        // The mantissa magnitude is 16 bits -- i.e, 0xnnnn.nn
        COMPLEX_RADIX_16p7 = 1,
        // The mantissa magnitude is 8 bits -- i.e, 0xnn.nnnn
        COMPLEX_RADIX_8p15 = 2,
        // The mantissa magnitude is 0 bits -- i.e, 0x0.nnnnnn
        COMPLEX_RADIX_0p23 = 3,

        // Where the actual value is.  This gives us 23 bits of
        // precision.  The top bit is the sign.
        COMPLEX_MANTISSA_SHIFT = 8,
        COMPLEX_MANTISSA_MASK = 0xffffff
    };

    // The data for this item, as interpreted according to dataType.
    uint32 data;
};

struct ResTableTypeSpecType
{
    local int __begin = FTell();

    ResChunk_header header;

    // The type identifier this chunk is holding.  Type IDs start
    // at 1 (corresponding to the value of the type bits in a
    // resource identifier).  0 is invalid.
    byte id;
    
    // Must be 0.
    byte res0;
    // Must be 0.
    ushort res1;
    
    // Number of uint32_t entry configuration masks that follow.
    uint32 entryCount;
    
    
    // Additional flag indicating an entry is public.
    // SPEC_PUBLIC = 0x40000000
    uint32 flag[entryCount];
    
    FSeek(header.size + __begin);
};

struct ResTableTypeType
{
    local int __begin = FTell();

    ResChunk_header header;
    
    // The type identifier this chunk is holding.  Type IDs start
    // at 1 (corresponding to the value of the type bits in a
    // resource identifier).  0 is invalid.
    byte id;
    
    // Must be 0.
    byte res0;
    // Must be 0.
    ushort res1;
    
    // Number of uint32_t entry indices that follow.
    uint32 entryCount;

    // Offset from header where ResTable_entry data starts.
    uint32 entriesStart;
    
    // Configuration this collection of entries is designed for.
    ResTable_config config;
    
    uint32 valueFlag[entryCount];
    local int i;
    local int validValueCount = 0;
    for (i = 0; i < entryCount; i++) 
    {
        if (valueFlag[i] != 0xffffffff)
        {
            validValueCount ++;
        }
    }
    struct Map
    {
        Res_value key;
        Res_value value;
    };
    Map map[validValueCount];
    FSeek(header.size + __begin);
};

struct ResTablePackage
{   
    local int __begin = FTell();

    ResChunk_header header;
    uint32 id;
    uint16 package_name[128];
    
    // Offset to a ResStringPool_header defining the resource
    // type symbol table.  If zero, this package is inheriting from
    // another base package (overriding specific values in it).
    uint32 typeStrings;

    // Last index into typeStrings that is for public use by others.
    uint32 lastPublicType;

    // Offset to a ResStringPool_header defining the resource
    // key symbol table.  If zero, this package is inheriting from
    // another base package (overriding specific values in it).
    uint32 keyStrings;

    // Last index into keyStrings that is for public use by others.
    uint32 lastPublicKey;

    FSeek(__begin + typeStrings);
    
    ResStringPool typeStringPool;
    ResStringPool keyStringPool;
    

    local short tag;
    while (FTell() - __begin < header.size)
    {   
        tag = ReadShort( FTell() );
        if (tag == 0x0201)
        {
            ResTableTypeType type;
        } 
        else if (tag == 0x0202)
        {   
            ResTableTypeSpecType specType;                   
        }
    }
    
    FSeek(header.size + __begin);
};


struct ResTable
{   
    local int __begin = FTell();
    ResChunk_header header;
    uint packageCount;
    ResStringPool resStringPool;
    ResTablePackage resTablePackage[packageCount] <optimize=false>;
    FSeek(header.size + __begin);
};


// Define the file
local short tag;
LittleEndian(); 
while( !FEof() )
{   
    // Read a tag
    tag = ReadShort( FTell() );
    if (tag == 0x0002)
    {
        SetBackColor( cLtPurple );
        ResTable table;
    }
    else
    {
        Warning( "Unknown tag encountered. Template stopped." );
        return -1;
    }
    
}
